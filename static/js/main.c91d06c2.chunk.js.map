{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PATH","data","wordsData","seen","path","node","_","sample","keys","words","neighbors","push","options","filter","x","length","getPath","blockLetters","letters","className","map","letter","App","useState","message","setMessage","shuffle","slice","setOptions","setLetters","pathIndex","setPathIndex","option","optionIndex","onClick","console","log","emptyIndices","value","index","newIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA2BA,IAAMA,EAtBN,WAEE,IADA,IAAMC,EAAOC,EAAU,GADN,aAMf,IAHA,IAAMC,EAAO,GACPC,EAAO,GACTC,EAAOC,IAAEC,OAAOD,IAAEE,KAAKP,MACd,CACXE,EAAKE,IAAQ,EADF,kBAEgBJ,EAAKI,GAFrB,GAEJI,EAFI,KAEGC,EAFH,KAGXN,EAAKO,KAAKL,IAAEC,OAAOE,IACnB,IAAMG,EAAUF,EAAUG,QAAO,SAAAC,GAAC,OAAKX,EAAKW,MAC5C,IAAKF,EAAQG,OAAQ,CACnB,GAAIX,EAAKW,OAAS,IAChB,MAAM,CAAN,EAAOX,GAET,MAEFC,EAAOC,IAAEC,OAAOK,OAfP,CAAC,IAAD,yCAoBFI,GAyDb,IAAMC,EAAe,SAACC,GAAD,OACnB,qBAAKC,UAAU,cAAf,SACG,YAAID,GAASE,KAAI,SAAAC,GAAM,OACtB,sBAAMF,UAAU,eAAhB,SACGE,UAKMC,EAhEf,WACE,IADa,EAEiBC,mBAAS,IAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGiBF,mBAC5BjB,IAAEoB,QAAF,sBAAc1B,EAAK2B,MAAM,EAHA,IAGzB,CAAiD,GAAI,GAAI,OAJ9C,mBAGNf,EAHM,KAGGgB,EAHH,OAMiBL,mBAC5BjB,IAAEoB,QAAF,YAAc1B,EAAK,MAPR,mBAMNkB,EANM,KAMGW,EANH,OASqBN,mBAAS,GAT9B,mBASNO,EATM,KASKC,EATL,KAWb,OACE,sBAAKZ,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACGP,EAAQQ,KAAI,SAACY,EAAQC,GAAT,OACX,qBAEEd,UAAS,sBAAiBa,EAAS,gBAAkB,sBACrDE,QAAS,WACP,GAAKF,EAIL,GAFAG,QAAQC,IAAIpC,EAAK8B,GAAYE,GAEzBhC,EAAK8B,KAAeE,EAAQ,CAC9B,IAAMK,EAAezB,EAClBQ,KAAK,SAACkB,EAAOC,GAAR,MAAkB,CAACD,EAAOC,MAC/B1B,QAAO,0CACPO,KAAI,0CAEDoB,EAAWlC,IAAEC,OAAO8B,GAC1BzB,EAAQ4B,GAAYxC,EAAK8B,EA7BZ,GA8BblB,EAAQqB,GAAe,GACvBL,EAAWhB,GACXiB,EAAWvB,IAAEoB,QAAF,YAAc1B,EAAK8B,EAAY,MAC1CC,EAAaD,EAAY,GACzBL,EAAW,iBAEXA,EAAW,WAtBjB,SA2BGO,GA1BIC,QA8BX,sBAAKd,UAAU,aAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCK,IACjC,qBAAKL,UAAU,oBAAf,SAAoCF,EAAaC,YCjE1CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c91d06c2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport wordsData from './words_data.json'\nimport _ from 'lodash'\n\nfunction getPath() {\n  const data = wordsData[\"8\"];\n  while (true) {\n    const seen = {};\n    const path = [];\n    let node = _.sample(_.keys(data));\n    while (true) {\n      seen[node] = true;\n      const [words, neighbors] = data[node];\n      path.push(_.sample(words));\n      const options = neighbors.filter(x => !seen[x]);\n      if (!options.length) {\n        if (path.length > 200) {\n          return path;\n        }\n        break;\n      }\n      node = _.sample(options);\n    }\n  }\n}\n\nconst PATH = getPath();\n\nfunction App() {\n  const num_actual_options = 7;\n  const [message, setMessage] = useState(\"\");\n  const [options, setOptions] = useState(\n    _.shuffle([...PATH.slice(0, num_actual_options), \"\", \"\", \"\"])\n  );\n  const [letters, setLetters] = useState(\n    _.shuffle([...PATH[0]])\n  );\n  const [pathIndex, setPathIndex] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"options-list\">\n        {options.map((option, optionIndex) =>\n          <div\n            key={optionIndex}\n            className={`letters-row ${option ? \"actual-option\" : \"option-placeholder\"}`}\n            onClick={() => {\n              if (!option) return;\n\n              console.log(PATH[pathIndex], option)\n\n              if (PATH[pathIndex] === option) {\n                const emptyIndices = options\n                  .map(((value, index) => [value, index]))\n                  .filter(([value]) => !value)\n                  .map(([, index]) => index);\n\n                const newIndex = _.sample(emptyIndices);\n                options[newIndex] = PATH[pathIndex + num_actual_options]\n                options[optionIndex] = \"\";\n                setOptions(options);\n                setLetters(_.shuffle([...PATH[pathIndex + 1]]));\n                setPathIndex(pathIndex + 1);\n                setMessage(\"Correct!\");\n              } else {\n                setMessage(\"Wrong!\");\n              }\n\n            }}\n          >\n            {option}\n          </div>\n        )}\n      </div>\n      <div className=\"right-half\">\n        <div className=\"status-message\">{message}</div>\n        <div className=\"scrambled-letters\">{blockLetters(letters)}</div>\n      </div>\n\n    </div>\n  );\n}\n\nconst blockLetters = (letters) =>\n  <div className=\"letters-row\">\n    {[...letters].map(letter =>\n      <span className=\"letter-block\">\n        {letter}\n      </span>\n    )}\n  </div>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}